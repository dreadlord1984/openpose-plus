#!/bin/bash
set -e

if [ -d /usr/local/cuda ]; then
    CUDA_HOME=/usr/local/cuda
fi

parse_args() {
    for i in "$@"; do
        case $i in
        --prefix=*)
            PREFIX="${i#*=}"
            ;;
        --with-trace)
            WITH_TRACE=1
            ;;
        --build-fake)
            BUILD_FAKE=1
            ;;
        --with-cuda=*)
            CUDA_HOME="${i#*=}"
            echo "configure --with-cuda=$CUDA_HOME"
            ;;
        *)
            echo "unknown argument $i"
            exit
            ;;
        esac
    done
}

CMAKE_FLAGS=

add_cmake_flag() {
    echo "using $1=$2"
    CMAKE_FLAGS="$CMAKE_FLAGS -D$1=$2"
}

add_cmake_flags() {
    if [ "${BUILD_FAKE}" == 1 ]; then
        add_cmake_flag BUILD_FAKE ON
    fi
    if [ "${WITH_TRACE}" == 1 ]; then
        add_cmake_flag WITH_TRACE ON
    fi
    if [ ! -z "${CUDA_HOME}" ]; then
        add_cmake_flag CUDA_TOOLKIT_ROOT_DIR $CUDA_HOME
        add_cmake_flag CMAKE_CUDA_COMPILER $CUDA_HOME/bin/nvcc
    fi
    add_cmake_flag CMAKE_BUILD_TYPE Release
    add_cmake_flag CMAKE_EXPORT_COMPILE_COMMANDS ON
    add_cmake_flag EXECUTABLE_OUTPUT_PATH $PWD/bin
    add_cmake_flag LIBRARY_OUTPUT_PATH $PWD/lib
}

parse_args $@
add_cmake_flags
cmake . $CMAKE_FLAGS
